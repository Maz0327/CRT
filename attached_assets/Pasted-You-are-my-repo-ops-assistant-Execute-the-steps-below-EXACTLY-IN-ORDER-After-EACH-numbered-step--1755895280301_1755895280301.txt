You are my repo ops assistant. Execute the steps below EXACTLY IN ORDER. 
After EACH numbered step, STOP and print:
- ✅ or ❌ status
- Key output or the last ~50 log lines if failing
- Anything you changed (files/lines)
- Either: “Reply ‘continue’ to proceed” OR a **HUMAN STEP** with precise instructions

Never skip a step. Never guess secrets. If a command or file isn’t found, STOP.

────────────────────────────────────────────────────────
STEP 1 — Baseline & hard stop on missing tooling
────────────────────────────────────────────────────────
1.1) Stop anything running:
- `pkill -f "vite|tsx server/index.ts" 2>/dev/null || true`

1.2) Verify toolchain:
- `node -v && npm -v`
- If either is missing or `npm` says “command not found”, print **HUMAN STEP: In Replit, click ⋯ near “Run” → Rebuild environment, then reply ‘continue’.** and STOP.

1.3) Ensure workspace dirs:
- `mkdir -p artifacts client/src server/types`

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 2 — Lock Vite to client/ and proxy to API
────────────────────────────────────────────────────────
2.1) Overwrite `vite.config.ts` with:
---BEGIN---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

export default defineConfig({
  root: path.resolve(__dirname, "client"),
  plugins: [react()],
  resolve: { alias: { "@": path.resolve(__dirname, "client/src") } },
  server: {
    host: true,
    port: 5175,
    strictPort: false,
    proxy: {
      "/api": {
        target: "http://localhost:5001",
        changeOrigin: true,
        rewrite: p => p.replace(/^\/api/, "")
      }
    }
  },
  build: {
    outDir: path.resolve(__dirname, "dist"),
    chunkSizeWarningLimit: 800
  }
});
---END---

2.2) Show me the file back (first 120 lines max): `sed -n '1,120p' vite.config.ts`

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 3 — Scripts & type shims (idempotent)
────────────────────────────────────────────────────────
3.1) Ensure package scripts:
- `npm pkg set scripts.dev='concurrently "vite --host --port 5175 --force" "PORT=5001 NODE_ENV=development tsx server/index.ts"'`
- `npm pkg set scripts.build='vite build'`
- `npm pkg set scripts.start='NODE_ENV=production PORT=5001 tsx server/index.ts'`

3.2) Print only the "scripts" block:  
`node -e "const p=require('./package.json'); console.log(JSON.stringify({scripts:p.scripts},null,2))"`

3.3) Make sure Vite env typing exists:
- Create `client/src/vite-env.d.ts` if missing with:  
---BEGIN---
/// <reference types="vite/client" />
interface ImportMetaEnv {
  readonly VITE_API_BASE?: string
  readonly VITE_API_URL?: string
  readonly VITE_SITE_URL?: string
  readonly VITE_SUPABASE_URL?: string
  readonly VITE_SUPABASE_ANON_KEY?: string
  readonly VITE_UIV2_MOCK?: string
}
interface ImportMeta { readonly env: ImportMetaEnv }
---END---

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 4 — Health endpoints (mirror under / and /api)
────────────────────────────────────────────────────────
4.1) Open `server/index.ts`. If not found, STOP with **HUMAN STEP: Tell me where your Express app is (file path).**  
If it exists but no health route, add both:
- `app.get("/healthz", (_,res)=>res.json({status:"ok", ts:new Date().toISOString()}));`
- `app.get("/api/healthz", (_,res)=>res.json({status:"ok", ts:new Date().toISOString()}));`
If a `/healthz` exists but not `/api/healthz`, add the latter.

4.2) Show me the diff (or the lines you changed) for `server/index.ts`.

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 5 — Bring up API then Vite, verify both
────────────────────────────────────────────────────────
5.1) Start API only in background, log to artifacts:
- `PORT=5001 NODE_ENV=development tsx server/index.ts > artifacts/api-$(date +%s).log 2>&1 & echo $! > /tmp/api.pid`
- `sleep 2`
- `curl -sSf http://localhost:5001/healthz || (tail -n 80 artifacts/api-*.log; echo "❌ API health failed"; exit 1)`

5.2) Start Vite only in background, log to artifacts:
- `vite --host --port 5175 --force > artifacts/vite-$(date +%s).log 2>&1 & echo $! > /tmp/vite.pid`
- `sleep 2`
- `curl -sSf http://localhost:5175/ | head -n 1 || (tail -n 80 artifacts/vite-*.log; echo "❌ Vite index failed"; exit 1)`
- `curl -sSf http://localhost:5175/api/healthz || (tail -n 80 artifacts/vite-*.log; echo "❌ Vite proxy /api/healthz failed"; exit 1)`

5.3) Print the two URLs to use:
- UI: http://localhost:5175/
- API: http://localhost:5001/

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 6 — Inventory API routes (so we can wire the UI)
────────────────────────────────────────────────────────
6.1) Try ripgrep, else grep:
- `command -v rg >/dev/null && rg -n "router\\.(get|post|patch|delete)\\(|app\\.(get|post|patch|delete)\\(" server > artifacts/route-inventory.txt || grep -RInE "router\\.(get|post|patch|delete)\\(|app\\.(get|post|patch|delete)\\(" server > artifacts/route-inventory.txt`

6.2) Show me the first 200 lines of `artifacts/route-inventory.txt`.

If no routes are found, STOP with **HUMAN STEP: confirm where your API routes live, or if endpoints aren’t implemented yet.**

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 7 — Quiet the TypeScript noise (non-blocking)
────────────────────────────────────────────────────────
7.1) In `client/tsconfig.json` and `server/tsconfig.json`, set:
- `"skipLibCheck": true`
- `"noImplicitAny": false`
- In client tsconfig, add `"exclude": ["src/__tests__/**"]` if not present.

7.2) Run: `npm run typecheck || true`  
Summarize counts (errors files/lines). Do not attempt bulk fixes yet.

STOP and wait for “continue”.

────────────────────────────────────────────────────────
STEP 8 — Run normal dev & report first failing UI call
────────────────────────────────────────────────────────
8.1) Kill background processes:
- `kill $(cat /tmp/api.pid) 2>/dev/null || true`
- `kill $(cat /tmp/vite.pid) 2>/dev/null || true`

8.2) Start dev normally:
- `npm run dev`

8.3) Watch console for failed network calls. If the browser/preview isn’t something you can control, then:
- Tail server logs and print any 4xx/5xx lines for /api/* for 30 seconds.
- If you detect failing endpoints, list the failing URL(s), method, and status.

If you need me to click anything in the Replit UI or add secrets, print a **HUMAN STEP** with exact instructions (name of secret, sample value format, where to click). Then STOP.

Otherwise STOP and say: “Dev is up. Reply ‘continue’ to proceed to wiring client services to API.”

────────────────────────────────────────────────────────
GENERAL RULES
- If ports 5175/5001 are already in use and pkill doesn’t help → **HUMAN STEP: Click the Stop button in Replit, wait 5s, then reply ‘continue’.**
- If `npm i` is required due to missing deps, run it and paste the summary. If there are severe audit issues that block install, STOP with the exact `npm audit fix` command needed and its impact.
- Never print secret values; only print whether a given key is present. If missing, emit **HUMAN STEP**: “Add SECRET_NAME in Replit → Secrets (lock icon).”