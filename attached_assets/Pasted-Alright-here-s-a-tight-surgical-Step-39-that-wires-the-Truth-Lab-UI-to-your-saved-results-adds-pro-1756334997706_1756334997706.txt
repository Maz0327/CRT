Alright—here’s a tight, surgical Step 39 that wires the Truth Lab UI to your saved results, adds progressive reveal, receipts, and solid error/empty states. I’m splitting human steps (you) from the agent block (Replit Agent).

⸻

Step 39 — Truth Lab UI: progressive reveal, receipts, error states

Human steps (you do these first)
	1.	Confirm Step 38 is complete (DB tables created, /api/truth/check/:id works).
	2.	Confirm the UI runs at your Replit Preview (port 3000) and you’re logged in (test user OK).
	3.	No vite.config.ts changes needed for this step.

When done, tell the agent to run the block below.

⸻

Replit Agent — execute exactly in order

39.1 Add shared types for Truth Lab result

File: client/src/ui-v2/types/truth.ts

export type TruthChain = {
  fact?: string;
  observation?: string;
  insight?: string;
  human_truth?: string;
  cultural_moment?: string;
};

export type EvidenceRow = {
  id: string;
  quote: string | null;
  url: string | null;
  source: string | null;
  event_timestamp: string | null;
};

export type TruthCheckRecord = {
  id: string;
  title: string | null;
  input_text?: string | null;
  input_urls?: string[] | null;
  input_images?: string[] | null;
  result: {
    truth_chain?: TruthChain;
    cohorts?: string[];
    strategic_moves?: string[];
    why_this_surfaced?: string;
    confidence?: number;
    evidence?: Array<{
      quote?: string;
      url?: string;
      source?: string;
      timestamp?: string;
    }>;
  };
  confidence: number | null;
  status: string;
  created_at: string;
};

export type TruthCheckPayload = {
  check: TruthCheckRecord;
  evidence: EvidenceRow[];
};


⸻

39.2 Extend Truth service (client)

Edit: client/src/ui-v2/services/truth.ts
(Keep existing exports; add these if missing.)

import type { TruthCheckPayload } from "../types/truth";

export async function analyzeText(input: {
  title?: string;
  text: string;
  projectId?: string;
}) {
  const res = await fetch(`/api/truth/analyze-text`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(input),
  });
  if (!res.ok) throw new Error(`analyzeText failed: ${res.status}`);
  return res.json() as Promise<{ truthCheckId: string; result?: any }>;
}

export async function fetchTruthCheck(id: string) {
  const res = await fetch(`/api/truth/check/${id}`, {
    headers: { "Content-Type": "application/json" },
  });
  if (!res.ok) throw new Error(`fetchTruthCheck failed: ${res.status}`);
  return res.json() as Promise<TruthCheckPayload>;
}


⸻

39.3 Create polling hook + progressive reveal

File: client/src/ui-v2/hooks/useTruthCheck.ts

import { useEffect, useMemo, useState } from "react";
import { fetchTruthCheck } from "../services/truth";
import type { TruthCheckPayload, TruthChain } from "../types/truth";

type RevealState = {
  showFact: boolean;
  showObservation: boolean;
  showInsight: boolean;
  showHumanTruth: boolean;
  showCulturalMoment: boolean;
};

export function useTruthCheck(id: string) {
  const [data, setData] = useState<TruthCheckPayload | null>(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);
  const [reveal, setReveal] = useState<RevealState>({
    showFact: false,
    showObservation: false,
    showInsight: false,
    showHumanTruth: false,
    showCulturalMoment: false,
  });

  useEffect(() => {
    let cancelled = false;

    async function load() {
      try {
        setLoading(true);
        const payload = await fetchTruthCheck(id);
        if (cancelled) return;
        setData(payload);
        setLoading(false);

        // Progressive reveal timeline (visual “typing” feel)
        const t0 = setTimeout(() => setReveal((r) => ({ ...r, showFact: true })), 200);
        const t1 = setTimeout(() => setReveal((r) => ({ ...r, showObservation: true })), 700);
        const t2 = setTimeout(() => setReveal((r) => ({ ...r, showInsight: true })), 1200);
        const t3 = setTimeout(() => setReveal((r) => ({ ...r, showHumanTruth: true })), 1700);
        const t4 = setTimeout(() => setReveal((r) => ({ ...r, showCulturalMoment: true })), 2200);

        return () => {
          clearTimeout(t0);
          clearTimeout(t1);
          clearTimeout(t2);
          clearTimeout(t3);
          clearTimeout(t4);
        };
      } catch (e: any) {
        if (cancelled) return;
        setErr(e?.message || "Failed to load");
        setLoading(false);
      }
    }
    load();
    return () => {
      cancelled = true;
    };
  }, [id]);

  const chain: TruthChain | undefined = useMemo(
    () => data?.check?.result?.truth_chain,
    [data]
  );

  const confidence: number | undefined =
    data?.check?.result?.confidence ?? (data?.check?.confidence ?? undefined) ?? undefined;

  return { data, loading, err, reveal, chain, confidence };
}


⸻

39.4 Result view component (clean, “Jobs mode”)

File: client/src/ui-v2/truth/TruthResultView.tsx

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useTruthCheck } from "../hooks/useTruthCheck";
import type { TruthChain } from "../types/truth";

function Section({
  label,
  value,
  show,
}: {
  label: string;
  value?: string;
  show: boolean;
}) {
  return (
    <AnimatePresence>
      {show && (
        <motion.div
          initial={{ opacity: 0, y: 8 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0 }}
          className="rounded-2xl p-4 bg-white/5 border border-white/10 backdrop-blur"
        >
          <div className="text-xs uppercase tracking-wide text-white/60">{label}</div>
          <div className="mt-2 text-base leading-relaxed">
            {value || <span className="text-white/40">—</span>}
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

export default function TruthResultView({ id }: { id: string }) {
  const { data, loading, err, reveal, chain, confidence } = useTruthCheck(id);

  if (loading) {
    return (
      <div className="space-y-4">
        {[...Array(5)].map((_, i) => (
          <div
            key={i}
            className="h-16 rounded-2xl bg-white/5 border border-white/10 animate-pulse"
          />
        ))}
      </div>
    );
  }

  if (err) {
    return (
      <div className="p-4 rounded-xl bg-red-500/10 border border-red-500/30">
        <div className="text-red-300 font-medium">Failed to load analysis</div>
        <div className="text-red-200/80 text-sm mt-1">{err}</div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="p-4 rounded-xl bg-yellow-500/10 border border-yellow-500/30">
        <div className="text-yellow-300">No data</div>
      </div>
    );
  }

  const title = data.check.title || "Truth Analysis";
  const why = data.check.result?.why_this_surfaced;
  const cohorts = data.check.result?.cohorts || [];
  const moves = data.check.result?.strategic_moves || [];
  const evidence = data.evidence || [];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-start justify-between gap-4">
        <div>
          <h1 className="text-xl font-semibold">{title}</h1>
          {why && <p className="text-white/70 text-sm mt-1">Why this surfaced: {why}</p>}
        </div>
        {typeof confidence === "number" && (
          <div className="shrink-0 text-right">
            <div className="text-xs uppercase tracking-wide text-white/60">Confidence</div>
            <div className="text-lg font-semibold">{Math.round(confidence * 100)}%</div>
          </div>
        )}
      </div>

      {/* Truth Chain */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Section label="Fact" value={chain?.fact} show={reveal.showFact} />
        <Section label="Observation" value={chain?.observation} show={reveal.showObservation} />
        <Section label="Insight" value={chain?.insight} show={reveal.showInsight} />
        <Section label="Human Truth" value={chain?.human_truth} show={reveal.showHumanTruth} />
        <Section
          label="Cultural Moment"
          value={chain?.cultural_moment}
          show={reveal.showCulturalMoment}
        />
      </div>

      {/* Cohorts / Strategic Moves */}
      {(cohorts.length > 0 || moves.length > 0) && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {cohorts.length > 0 && (
            <div className="rounded-2xl p-4 bg-white/5 border border-white/10">
              <div className="text-xs uppercase tracking-wide text-white/60">Cohorts</div>
              <ul className="mt-2 list-disc list-inside space-y-1">
                {cohorts.map((c, i) => (
                  <li key={i}>{c}</li>
                ))}
              </ul>
            </div>
          )}
          {moves.length > 0 && (
            <div className="rounded-2xl p-4 bg-white/5 border border-white/10">
              <div className="text-xs uppercase tracking-wide text-white/60">
                Strategic Moves
              </div>
              <ul className="mt-2 list-disc list-inside space-y-1">
                {moves.map((m, i) => (
                  <li key={i}>{m}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      {/* Evidence */}
      <div className="rounded-2xl p-4 bg-white/5 border border-white/10">
        <div className="text-xs uppercase tracking-wide text-white/60">Receipts</div>
        {evidence.length === 0 ? (
          <div className="mt-2 text-white/60 text-sm">No evidence captured.</div>
        ) : (
          <ul className="mt-2 space-y-2">
            {evidence.map((e) => (
              <li key={e.id} className="text-sm">
                {e.quote && <div className="italic">&ldquo;{e.quote}&rdquo;</div>}
                <div className="text-white/70">
                  {e.source ? `${e.source} — ` : ""}
                  {e.url ? (
                    <a href={e.url} target="_blank" rel="noreferrer" className="underline">
                      {e.url}
                    </a>
                  ) : (
                    "No URL"
                  )}
                  {e.event_timestamp ? ` • ${e.event_timestamp}` : ""}
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}


⸻

39.5 Add routed page

File: client/src/ui-v2/pages/TruthResultPage.tsx

import React from "react";
import { useParams } from "wouter";
import TruthResultView from "../truth/TruthResultView";

export default function TruthResultPage() {
  const params = useParams<{ id: string }>();
  const id = params?.id || "";
  return (
    <div className="container mx-auto px-4 py-6">
      <TruthResultView id={id} />
    </div>
  );
}


⸻

39.6 Hook into router

Edit: client/src/ui-v2/app/UiV2App.tsx
(Add a route; don’t remove existing routes.)

// at top
import TruthResultPage from "../pages/TruthResultPage";

// inside your <Router> block
<Route path="/truth/check/:id" component={TruthResultPage} />


⸻

39.7 Redirect to result after starting analysis

If you have a “Analyze” button in Truth Lab (text mode), wire it to navigate to the result page using the new analyzeText service.

Edit: client/src/ui-v2/pages/TruthLabPage.tsx (or wherever your analyze form lives)

import { useLocation } from "wouter";
import { analyzeText } from "../services/truth";

const [, navigate] = useLocation();

async function onAnalyze(text: string, title?: string, projectId?: string) {
  setSubmitting(true);
  try {
    const { truthCheckId } = await analyzeText({ text, title, projectId });
    navigate(`/truth/check/${truthCheckId}`);
  } catch (e: any) {
    setError(e?.message || "Failed to start analysis");
  } finally {
    setSubmitting(false);
  }
}


⸻

39.8 Smoke test

# 1) Start dev
npm run dev

# 2) From the UI, go to your Truth Lab input
#    - Paste a non-trivial paragraph
#    - Click Analyze
#    - You should be redirected to /truth/check/:id
#    - Watch the progressive reveal of the five-chain sections
#    - Receipts render, links clickable


⸻

39.9 Commit & tag

git add -A
git commit -m "feat(ui/truth): result page with progressive reveal, receipts, error & empty states"
git tag -f step-39-truth-ui
git push && git push --force --tags


⸻

What this completes
	•	A clean Truth Result page at /truth/check/:id.
	•	Progressive reveal (Fact → Observation → Insight → Human Truth → Cultural Moment) to “feel fast.”
	•	Receipts section rendering canonical evidence.
	•	Error/empty states and skeleton loading.
	•	One-click handoff from Analyze → Result.

When this looks good, Step 40 will add: multi-capture grouping UX, “Add to Deck” actions directly from the result page, and consistent toasts/telemetry for product QA.