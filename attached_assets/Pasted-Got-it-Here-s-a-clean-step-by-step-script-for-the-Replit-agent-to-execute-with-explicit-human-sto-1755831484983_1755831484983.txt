Got it. Here’s a clean, step-by-step script for the Replit agent to execute, with explicit human stops where the agent needs you to do something (like set secrets). It fixes the issues the audit found and validates the app boots.

⸻

Replit Agent — CRStrat-main: Fix & Verify Plan

0) Preconditions (Human steps)
	1.	In Replit → Tools → Secrets, set:
	•	DATABASE_URL = your Supabase Postgres URL
	•	SESSION_SECRET = long random string
	•	ALLOWED_ORIGINS = https://<your-repl-subdomain>.repl.co,http://localhost:5174
	•	PORT = 5000
	•	RATE_LIMIT_WINDOW_MS = 60000
	•	RATE_LIMIT_MAX = 300
	2.	(Only if admin ops required) Add one of:
	•	SUPABASE_SERVICE_ROLE_KEY = your Supabase service role key
	•	If code expects alias: also set SUPABASE_SERVICE_KEY to the same value

If any of these secrets are missing or the agent is forbidden from reading them, pause and request human input.

⸻

1) Clean environment & pin toolchain

Run (shell):

pkill -f "vite" || true

rm -rf node_modules package-lock.json pnpm-lock.yaml yarn.lock

npm config set registry https://registry.npmjs.org/
npm pkg set devDependencies.esbuild=0.21.5
npm pkg set overrides.esbuild=0.21.5

# Ensure react plugin present and fast (SWC)
npm i -D @vitejs/plugin-react-swc

# Install deps
npm i

Accept if: install completes without ETARGET esbuild@0.24.x errors.

⸻

2) Install missing/flagged packages

Run (shell):

# Critical for PostCSS/Tailwind
npm i -D autoprefixer @tailwindcss/postcss

# Server dev logging
npm i pino-pretty

# Type shims
npm i -D @types/connect-pg-simple @types/multer @types/uuid

# UI deps often imported by this codebase
npm i \
  embla-carousel-react react-day-picker input-otp \
  @radix-ui/react-accordion @radix-ui/react-alert-dialog @radix-ui/react-aspect-ratio \
  @radix-ui/react-avatar @radix-ui/react-checkbox @radix-ui/react-collapsible \
  @radix-ui/react-context-menu @radix-ui/react-dialog @radix-ui/react-dropdown-menu \
  @radix-ui/react-hover-card @radix-ui/react-label @radix-ui/react-menubar \
  @radix-ui/react-navigation-menu @radix-ui/react-popover @radix-ui/react-progress \
  @radix-ui/react-radio-group @radix-ui/react-scroll-area @radix-ui/react-select \
  @radix-ui/react-separator @radix-ui/react-slider @radix-ui/react-slot \
  @radix-ui/react-switch @radix-ui/react-tabs @radix-ui/react-toast \
  @radix-ui/react-toggle @radix-ui/react-toggle-group @radix-ui/react-tooltip

Accept if: install completes; no unresolved package errors remain.

⸻

3) Fix Vite config (CJS deprecation / port / proxy / duplicate build)

Create/overwrite vite.config.ts with:

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

export default defineConfig({
  resolve: { alias: { "@": path.resolve(__dirname, "client/src") } },
  plugins: [react()],
  server: {
    port: 5174,
    strictPort: true,
    proxy: { "/api": "http://localhost:5000" }
  },
  build: { chunkSizeWarningLimit: 800 }
});

Accept if: file saves and contains one build key and SWC plugin import.

⸻

4) Add Vite env types (prevents import.meta.env TS errors)

Create client/src/vite-env.d.ts:

/// <reference types="vite/client" />
interface ImportMetaEnv {
  readonly VITE_API_BASE?: string
  readonly VITE_API_URL?: string
  readonly VITE_SITE_URL?: string
  readonly VITE_SUPABASE_URL?: string
  readonly VITE_SUPABASE_ANON_KEY?: string
  readonly VITE_UIV2_MOCK?: string
}
interface ImportMeta { readonly env: ImportMetaEnv }

Accept if: file exists at that exact path.

⸻

5) Shim missing module types

Create server/types/connect-pg-simple.d.ts:

declare module 'connect-pg-simple';

Update tsconfig.json to include server types and sane defaults:
	•	If tsconfig.json exists, ensure:
	•	"skipLibCheck": true
	•	"noEmit": true
	•	"types": ["node"]
	•	"typeRoots": ["./server/types","./node_modules/@types"]
	•	Paths include "@/*": ["client/src/*"], and includes cover client, server, shared, scripts, and server/types/**/*.d.ts.
	•	If it’s malformed, replace with:

{
  "include": ["client","server","shared","scripts","server/types/**/*.d.ts"],
  "exclude": ["node_modules","build","dist","**/__tests__/**"],
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020","DOM"],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "jsx": "react-jsx",
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "types": ["node"],
    "typeRoots": ["./server/types","./node_modules/@types"],
    "baseUrl": ".",
    "paths": { "@/*": ["client/src/*"] }
  }
}

Accept if: tsc -p tsconfig.json --noEmit runs (warnings ok).

⸻

6) Ensure Postgres session table exists

Run (shell):

node -e "console.log(process.env.DATABASE_URL ? 'DB URL present' : 'NO DATABASE_URL')" | grep -q 'DB URL present' || { echo '❌ DATABASE_URL missing'; exit 1; }

node - <<'NODE'
const { Client } = require('pg');
const sql = `
create table if not exists public."session" (
  sid    varchar primary key not null,
  sess   json    not null,
  expire timestamp(6) not null
);
create index if not exists idx_session_expire on public."session"(expire);
`;
(async () => {
  try {
    const c = new Client({ connectionString: process.env.DATABASE_URL, ssl: { rejectUnauthorized: false } });
    await c.connect();
    await c.query(sql);
    const r = await c.query(`select 1 from information_schema.tables where table_schema='public' and table_name='session'`);
    console.log(r.rowCount ? "✅ session table ready" : "❌ session table missing");
    await c.end();
  } catch (e) {
    console.error("❌ session table step failed:", e.message);
    process.exit(1);
  }
})();
NODE

If connection fails or secrets are inaccessible: stop and ask human to verify DATABASE_URL and network access.

⸻

7) Optional cleanup (routing/libs)
	•	If wouter is the router actually used, and react-router-dom is unused, remove it:

npm uninstall react-router-dom || true


	•	Do not restructure client/src/ui-v2/pages/ now; it’s expected by the current app.

⸻

8) Build & run

Run (shell):

npm run typecheck || true
npm run build || true
npm run dev

Accept if:
	•	Vite: “ready” on http://localhost:5174
	•	Server: listening on 5000 without pino-pretty errors
	•	No PostCSS autoprefixer errors
	•	No port-5173 conflict (we set 5174)

⸻

9) System audit (post-fix verification)

Run (shell):

# API health
curl -sf http://localhost:5000/healthz && echo "✅ /healthz OK" || echo "❌ /healthz failed"

# Confirm autoprefixer is installed and PostCSS loads
node -e "require('autoprefixer'); console.log('✅ autoprefixer present')"

# Quick TS probe (finish under 90s; warnings ok)
npm run typecheck || echo "⚠️ typecheck warnings (non-blocking)"

# Print env presence (no secrets)
node -e "console.log({HAS_DB:!!process.env.DATABASE_URL, HAS_SESSION:!!process.env.SESSION_SECRET, HAS_SR:!!(process.env.SUPABASE_SERVICE_ROLE_KEY||process.env.SUPABASE_SERVICE_KEY)})"

# Check that Vite proxy target matches server port
grep -R \"proxy\" -n vite.config.ts || echo "ℹ️ proxy config not found (ok if not needed)"

Report back:
	•	/healthz status
	•	Any missing envs
	•	Any remaining TS errors (file + first line)

⸻

10) Human stops / forbidden ops
	•	If the agent cannot:
	•	Read/set Secrets → ask human to set/update them and re-run step 8.
	•	Reach the database (firewall/SSL) → ask human to confirm Supabase project’s connection string and SSL requirement.
	•	Install from registry due to policy → ask human for permission to run npm i --legacy-peer-deps as a fallback.
	•	Overwrite config files (PR required) → ask human to approve changes or provide write access.

⸻

11) Success criteria (what “done” means)
	•	Build no longer fails on autoprefixer.
	•	TypeScript completes (warnings allowed, no fatal).
	•	Server listens on :5000, client on :5174 and proxies /api.
	•	Session table exists in Postgres.
	•	/healthz returns 200.
	•	(If SUPABASE_SERVICE_ROLE_KEY not provided) routes requiring admin ops are feature-gated or skipped.

⸻

If any step fails, return the exact command output (last ~60 lines) and which step number failed. I’ll provide a targeted one-liner fix.