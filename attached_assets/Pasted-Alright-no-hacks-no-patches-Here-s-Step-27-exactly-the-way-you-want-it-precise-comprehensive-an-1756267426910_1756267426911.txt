Alright‚Äîno hacks, no patches. Here‚Äôs Step 27 exactly the way you want it: precise, comprehensive, and safe. This step makes zero code changes and just captures a clean baseline so we know exactly what‚Äôs running, what ports are open, and what the app returns right now.

‚∏ª

Step 27 ‚Äî Baseline Health Snapshot (No Edits, No Drift)

Goal

Capture an authoritative snapshot of the system as-is so we can compare before/after each future step and spot regressions instantly.

Agent: What to do (exactly)

Assumptions
	‚Ä¢	Working dir is /home/runner/workspace (the project root).
	‚Ä¢	npm run dev currently starts: Vite (port 5175) and API (port 5001).
	‚Ä¢	Do not edit any files in this step.

Run these commands exactly, in one shell session:

set -euo pipefail

# 0) Prepare artifacts folder with timestamp
mkdir -p artifacts
STAMP="$(date +%Y%m%d-%H%M%S)"
BASE="artifacts/baseline-$STAMP"
touch "$BASE.md"

# 1) Git + runtime + scripts snapshot
{
  echo "## Git"
  git rev-parse --abbrev-ref HEAD || true
  git status -s || true

  echo
  echo "## Runtime versions"
  node -v || true
  npm -v || true

  echo
  echo "## package.json: name, version, scripts"
  jq '{name, version, scripts}' package.json 2>/dev/null || cat package.json | sed -n '1,160p'
} | tee "$BASE.md" > /dev/null

# 2) Env inventory (keys only, redact values)
{
  echo
  echo "## Env files (keys only)"
  if [[ -f .env ]]; then
    echo "### .env"
    # Print only KEY=**** (redacted)
    sed -n 's/^\([A-Za-z_][A-Za-z0-9_]*\)=.*/\1=REDACTED/p' .env
  else
    echo "(no .env found)"
  fi
  if [[ -f .env.example ]]; then
    echo "### .env.example (keys)"
    sed -n 's/^\([A-Za-z_][A-Za-z0-9_]*\)=.*/\1=<example>/p' .env.example
  fi
} | tee -a "$BASE.md" > /dev/null

# 3) Key config snapshot (read-only)
{
  echo
  echo "## Key configs (first 160 lines if present)"
  for f in vite.config.ts server/index.ts server/prod-server.ts server/prod-frontend.ts server/health.ts tsconfig.json; do
    if [[ -f "$f" ]]; then
      echo "### $f"
      sed -n '1,160p' "$f"
      echo
    fi
  done
} | tee -a "$BASE.md" > /dev/null

# 4) Kill any straggler dev processes (don‚Äôt fail if none)
pkill -f "vite --host" 2>/dev/null || true
pkill -f "tsx server/index.ts" 2>/dev/null || true
sleep 1

# 5) Start API **alone** (port 5001) in background, capture logs
PORT=5001 NODE_ENV=development tsx server/index.ts \
  > "$BASE.api.log" 2>&1 & echo $! > /tmp/api.pid
sleep 2

API_OK=0
if curl -fsS http://localhost:5001/healthz >/dev/null; then
  API_OK=1
fi

# 6) Start Vite **alone** (port 5175) in background, capture logs
vite --host --port 5175 --force \
  > "$BASE.vite.log" 2>&1 & echo $! > /tmp/vite.pid
sleep 2

VITE_OK=0
if curl -fsS http://localhost:5175/ >/dev/null; then
  VITE_OK=1
fi

# 7) Check Vite ‚Üí API proxy (expects server to respond at /api/healthz)
PROXY_OK=0
if curl -fsS http://localhost:5175/api/healthz >/dev/null; then
  PROXY_OK=1
fi

# 8) Summarize results
{
  echo
  echo "## Port/health summary"
  echo "- API (5001) healthz: $([[ $API_OK -eq 1 ]] && echo OK || echo FAIL)"
  echo "- Vite (5175) index:  $([[ $VITE_OK -eq 1 ]] && echo OK || echo FAIL)"
  echo "- Vite proxy (/api/healthz): $([[ $PROXY_OK -eq 1 ]] && echo OK || echo FAIL)"
} | tee -a "$BASE.md" > /dev/null

# 9) Stop background processes cleanly
kill "$(cat /tmp/vite.pid 2>/dev/null)" 2>/dev/null || true
kill "$(cat /tmp/api.pid 2>/dev/null)" 2>/dev/null || true
rm -f /tmp/vite.pid /tmp/api.pid

# 10) Append last 80 lines of each log for quick inspection
{
  echo
  echo "## Tail logs (last 80 lines)"
  echo "### API log ($BASE.api.log)"
  tail -n 80 "$BASE.api.log" || true
  echo
  echo "### Vite log ($BASE.vite.log)"
  tail -n 80 "$BASE.vite.log" || true
} | tee -a "$BASE.md" > /dev/null

echo "‚úÖ Baseline snapshot written to: $BASE.md"
echo "üóÇ API log:  $BASE.api.log"
echo "üóÇ Vite log: $BASE.vite.log"

What the agent must hand back
	‚Ä¢	Path to the generated baseline report: artifacts/baseline-YYYYMMDD-HHMMSS.md
	‚Ä¢	Paths to the logs:
	‚Ä¢	artifacts/baseline-‚Ä¶‚Äã.api.log
	‚Ä¢	artifacts/baseline-‚Ä¶‚Äã.vite.log

Success criteria (pass/fail)
	‚Ä¢	The markdown report exists and includes:
	‚Ä¢	Git branch + status
	‚Ä¢	Node/npm versions
	‚Ä¢	package.json scripts
	‚Ä¢	Redacted env keys (no secrets)
	‚Ä¢	First 160 lines of key configs
	‚Ä¢	Health summary of ports and proxy checks
	‚Ä¢	Tail of logs for both servers
	‚Ä¢	No files were modified.

If something fails
	‚Ä¢	Do not ‚Äúfix‚Äù anything.
	‚Ä¢	Include the failing curl result and the relevant log tail in your message.
	‚Ä¢	Stop and wait for my go/no-go before proceeding to Step 28.

‚∏ª

If you‚Äôre good with this, tell me ‚ÄúBaseline captured. Proceed to 28.‚Äù and I‚Äôll give you Step 28 in the same no-drift format.