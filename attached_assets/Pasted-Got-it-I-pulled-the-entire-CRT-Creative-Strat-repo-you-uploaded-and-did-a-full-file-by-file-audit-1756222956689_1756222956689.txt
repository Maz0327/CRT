Got it — I pulled the entire CRT‑Creative‑Strat repo you uploaded and did a full, file‑by‑file audit. Below is a clear status report and a corrective plan that keeps us aligned with the “correct way” (not quick hacks). I end with an agent‑ready patch set you can run to fix the “blocked host / blank page” and a few correctness issues I found.

⸻

1) Repository health snapshot

Toolchain & config
	•	vite.config.ts is present and points root → client/, proxy → http://localhost:5001, and build → dist/.
⚠️ Missing server.allowedHosts and HMR settings for Replit; strictPort: false allows port drift (5175 → 5176), which can confuse the Replit port mapper and your browser preview.
	•	tsconfig.json is clean and supports client/src path alias @/....
	•	.replit present; ports 5001 and 5175 are exposed. Replit will surface 3001 (maps to API 5001) and 3000 (maps to Vite 5175).

Server (server/)
	•	index.ts wires middleware (security, JSON, compression), mounts routes under /api/*, adds health check /healthz, scheduler starts, and in dev mounts Vite middleware (via server/vite.ts). In production it serves built assets via server/prod-frontend.ts.
	•	Storage layer is abstracted in server/storage.ts + server/lib/supabaseStorage.ts. It uses your Supabase service key for buckets (e.g., media) and DB access via DATABASE_URL. Logs show: “✅ Connected to database with public schema.”
	•	Routes exist for captures, feeds, briefs/brief‑canvas, truth, extension endpoints (/api/ext/capture), google export, etc.
	•	Logging is via pino with pino‑pretty transport configured.
	•	Jobs & workers: moments aggregator and scheduler initialize (auto‑scan disabled by default).

Client (client/)
	•	Entry: client/index.html → client/src/main.tsx renders UiV2App under wouter routing.
	•	API access: there are two HTTP helpers — client/src/lib/api.ts and client/src/ui-v2/lib/api.ts — both support get/post/patch/del with base /api. They’re functionally similar but duplicated (risk of drift).
	•	UI‑V2 pages/components exist (Briefs, Feeds, Captures, Projects, Truth tabs, etc.). Tailwind v4 config (tailwind.config.ts) + @tailwindcss/postcss + autoprefixer are in place.

Extension (chrome-extension/)
	•	Present, with manifest.json (v3), background.js, content.js, and popup.html.
It’s not yet tied to a specific API base and is not part of a build step. We’ll integrate it after core app is green (per your plan).

Env & secrets
	•	server/lib/env.ts pulls required envs; logs confirm OpenAI/GCP/Supabase/DB wiring in your last runs.

⸻

2) What’s working now
	•	Server boots, listens (5001), initializes DB, storage, scheduler, routes, and dev middleware.
	•	Vite dev runs on 5175 and proxies /api/* to 5001.
	•	Health check: /healthz OK (200).
	•	Storage: Supabase bucket + DB connectivity OK (“✅ Using working DatabaseStorage with correct schema…”).
	•	Initial test user seeded (“✅ Test user already exists: test@example.com / test123”).

⸻

3) What’s not working / risky / needs cleanup
	1.	Blank page & “Blocked request. host not allowed” (Vite)
	•	Cause: Vite 5+ enforces server.allowedHosts. Replit uses dynamic *.worf.replit.dev hosts. Without whitelisting, Vite blocks HMR/file requests.
	•	Also, strictPort: false lets Vite hop ports when 5175 is busy, breaking the Replit 5175→3000 mapping.
	2.	Dev/Prod preview mismatch
	•	Replit “Open in Browser” may land on 3001 (API) while the UI lives on 3000. Users see a server JSON or 404. This is a UX confusion, not a code bug.
	3.	Parameter casing in extension capture route
	•	In server/routes/ext-capture.ts you build an object with user_id: ext.userId for createCapture(...). The storage layer (and domain types) prefer camelCase (userId). This will compile and run in JS but TypeScript and future refactors will break. Correct it to userId.
	4.	Duplicate HTTP client modules
	•	client/src/lib/api.ts and client/src/ui-v2/lib/api.ts are nearly identical. Keep one (recommend client/src/lib/api.ts) and point all imports to it to avoid drift.
	5.	Chrome extension not yet integrated
	•	No build target, no .env‑driven base URL, and no formal handshake with the main app (auth/session) yet. That’s expected per plan (finish app → then build extension), but we must track it.
	6.	Security posture in dev
	•	Right now CORS dev mode is permissive. That’s fine in dev but we’ll tighten allowed origins in prod steps.
	7.	Unnecessary dependencies
	•	Both @vitejs/plugin-react and @vitejs/plugin-react-swc are installed. You’re using SWC in config; safe to remove the classic plugin to prevent confusion.

⸻

4) Why the blank page persists (root cause)
	•	Your server logs show 200/304 on / and /src/main.tsx, which means the request reached the server but the browser refused to load subsequent Vite‑served modules because the host was blocked by Vite. Once HMR / module requests get blocked, you see a blank page with “Blocked request…” in the console.

⸻

5) Corrections I recommend now (agent‑ready)

These steps fix the host blocking & blank page and align the app with Replit networking the right way.

5.1 Update vite.config.ts (allow Replit host, fix HMR, prevent port drift)

# Stop any running dev servers (ignore errors)
pkill -f "vite|tsx server/index.ts" 2>/dev/null || true

# Overwrite vite.config.ts with a Replit-safe, correct config
cat > vite.config.ts <<'TS'
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

const replitHost = process.env.REPL_SLUG && process.env.REPL_OWNER
  ? `${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`
  : undefined;

// Fallback: allow common Replit dev domains; prefer exact host if available
const allowed = replitHost
  ? [replitHost, /\.worf\.replit\.dev$/, /\.repl\.co$/, "localhost"]
  : [/\.worf\.replit\.dev$/, /\.repl\.co$/, "localhost"];

export default defineConfig({
  root: path.resolve(__dirname, "client"),
  plugins: [react()],
  resolve: { alias: { "@": path.resolve(__dirname, "client/src") } },
  server: {
    host: true,
    port: 5175,
    strictPort: true,                       // keep Replit port mapping stable
    allowedHosts: allowed,                  // whitelist replit host(s)
    hmr: {
      clientPort: 443,                      // Replit proxies over HTTPS
      protocol: "wss",
      host: replitHost || undefined
    },
    origin: replitHost ? `https://${replitHost}` : undefined,
    proxy: {
      "/api": {
        target: "http://localhost:5001",
        changeOrigin: true,
        rewrite: p => p.replace(/^\/api/, "")
      }
    }
  },
  build: {
    outDir: path.resolve(__dirname, "dist"),
    chunkSizeWarningLimit: 800
  }
});
TS

echo "✅ Updated vite.config.ts with allowedHosts + HMR + strictPort"

5.2 Fix the parameter casing in the extension capture route

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/routes/ext-capture.ts
@@
-      const created = await storage.createCapture({
-        type: 'web',
-        projectId: projectId,
-        user_id: ext.userId,
+      const created = await storage.createCapture({
+        type: 'web',
+        projectId: projectId,
+        userId: ext.userId,
         summary: ext.summary || null,
         title: ext.title || null,
         metadata: ext.metadata || undefined,
         content: ext.content || null,
         url: ext.url || null,
*** End Patch
PATCH

echo "✅ Normalized createCapture payload (userId camelCase)"

If applypatch isn’t available in your shell, use sed -i:

sed -i 's/user_id:\s*ext\.userId/userId: ext.userId/' server/routes/ext-capture.ts

5.3 De‑duplicate the client API helper (optional but recommended now)

Pick client/src/lib/api.ts as the single source; re‑export from the UI‑V2 path to avoid mass edits:

# Make ui-v2/lib/api.ts a thin re-export of the canonical helper
cat > client/src/ui-v2/lib/api.ts <<'TS'
export * from "../../lib/api";
TS

echo "✅ Unified API helper via re-export"

(Later we can search & replace imports to point directly to @/lib/api.)

5.4 Remove unused Vite plugin (keep SWC)

npm remove @vitejs/plugin-react --save-dev || true
echo "✅ Removed unused @vitejs/plugin-react (keeping -swc)"

5.5 Restart dev & verify (using the right ports)

# Start dev
npm run dev 2>&1 | tee artifacts/dev-$(date +%s).log

	•	Open UI at the Replit port that maps to Vite 5175 → 3000.
In Replit UI, choose the port labeled 3000 (or the URL ending with …-3000….replit.dev).
	•	Do not use 3001 for the UI — that’s the API (5001).

Quick smoke tests from the shell:

# Vite dev index (should be HTML)
curl -sS http://localhost:5175/ | head -n1

# Vite → API proxy to server healthz (should be JSON with "status":"ok")
curl -sS http://localhost:5175/api/healthz

# API direct (server) — note: no "/api" prefix when hitting 5001 directly
curl -sS http://localhost:5001/healthz

If you still see “Blocked request. host not allowed”, copy the actual Replit host shown in the browser console and add it explicitly to allowedHosts array in vite.config.ts, then restart.

⸻

6) Suggested updates to Steps 27–34 (based on this audit)

What changes? Mostly ordering and a bit of scope:
	•	Step 27 (now): Apply the Vite allowedHosts/HMR fix above and normalize the extension capture payload. Confirm UI loads on 3000 and API passes health check on 3001.
	•	Step 28: Lock the canonical client API helper (@/lib/api) and replace other duplicate imports (we’ve started with a re‑export to keep things safe).
	•	Step 29: Tighten server CORS for production using ALLOWED_ORIGINS (keep dev permissive).
	•	Step 30: Add a lint/typecheck gate (npm run typecheck) and fix any red lines that remain (the current snapshot looks much cleaner than the earlier error dump, but we’ll re‑run after these patches).
	•	Step 31: Production build & serve test: npm run build then NODE_ENV=production PORT=5001 tsx server/index.ts → curl / and ensure dist/ assets are served by server/prod-frontend.ts.
	•	Step 32: Define .env template (document required keys for DB, Supabase, OpenAI, Google).
	•	Step 33: Decide auth strategy for the Chrome extension (either bearer token generated in app → copied into extension settings; or Supabase auth embedded in the extension) and wire the extension POSTs to /api/ext/capture.
	•	Step 34: Add a minimal CI check (typecheck + build) so future edits don’t regress.

If you want, I can expand each of those into agent‑ready command blocks (like in §5) as we proceed.

⸻

7) Short answers to your immediate questions
	•	“Why do I see dev:3001 when I open?”
Replit exposes both ports; sometimes it opens the API (5001→3001) tab first. Always open 3000 for the UI (5175→3000). You can pin the correct tab in Replit.
	•	“Did we build the extension?”
The extension files exist, but it’s not built or integrated yet (no webpack/vite target for it, no environment‑aware base URL, no auth handshake). We’ll do this after the app is green and the API contract is finalized.

⸻

Want me to provide the agent script for Steps 28–31 next (API helper unification, CORS hardening, prod build smoke, .env template)?