Here’s Step 23, now rewritten as a detailed, agent-ready instruction set:

⸻

✅ Step 23 — Prep & Validate Development Environment

This ensures the local/remote environment (Replit in your case) is fully aligned before deeper fixes (client/server TS, shims, API paths) continue. It also verifies all required services, configs, and dev scripts exist and work as intended.

⸻

23.0 Stop Any Running Processes

Before making adjustments:

pkill -f "vite|tsx server/index.ts" 2>/dev/null || true


⸻

23.1 Verify NPM Scripts

Ensure scripts in package.json match these:
	•	dev: concurrently runs Vite (port 5175) + API (port 5001)
	•	build: runs vite build
	•	start: runs API in production mode (serving dist)

Run:

jq '.scripts' package.json

✅ Expect output like:

"dev": "concurrently \"vite --host --port 5175 --force\" \"PORT=5001 NODE_ENV=development tsx server/index.ts\"",
"build": "vite build",
"start": "NODE_ENV=production PORT=5001 tsx server/index.ts"

If different:
Apply patch:

npm pkg set scripts.dev='concurrently "vite --host --port 5175 --force" "PORT=5001 NODE_ENV=development tsx server/index.ts"'
npm pkg set scripts.build='vite build'
npm pkg set scripts.start='NODE_ENV=production PORT=5001 tsx server/index.ts'


⸻

23.2 Confirm Vite Config Exists

Check vite.config.ts:

ls -l vite.config.ts && head -n 20 vite.config.ts

✅ Should include:

root: path.resolve(__dirname, "client"),
server: { port: 5175, proxy: { "/api": { target: "http://localhost:5001" } } },
build: { outDir: path.resolve(__dirname, "dist") }

If missing or wrong:
Recreate:

cat > vite.config.ts <<'TS'
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

export default defineConfig({
  root: path.resolve(__dirname, "client"),
  plugins: [react()],
  resolve: { alias: { "@": path.resolve(__dirname, "client/src") } },
  server: {
    host: true,
    port: 5175,
    proxy: { "/api": { target: "http://localhost:5001", changeOrigin: true, rewrite: p => p.replace(/^\/api/, "") } }
  },
  build: { outDir: path.resolve(__dirname, "dist"), chunkSizeWarningLimit: 800 }
});
TS


⸻

23.3 Ensure Node + Dependencies Are Installed

Check:

node -v && npm -v

If npm: command not found in Replit:
	•	Click ⋯ menu near “Run” → Reinstall Nix Environment in Replit.
	•	Then run:

npm install


⸻

23.4 Verify Key Env Vars

Expected:
	•	DATABASE_URL (Postgres via Supabase)
	•	SUPABASE_SERVICE_ROLE_KEY
	•	OPENAI_API_KEY (for signal processing)
	•	Optional: BRIGHT_DATA_*, GOOGLE_APPLICATION_CREDENTIALS

Print:

echo $DATABASE_URL && echo $SUPABASE_SERVICE_ROLE_KEY && echo $OPENAI_API_KEY

If missing:
Add them via Replit → Secrets or .env.local.

⸻

23.5 Smoke Test: API + Vite Together

Run:

npm run dev

✅ Expect:
	•	[server] listening on 5001
	•	Vite: Local: http://localhost:5175/
	•	curl -sSf http://localhost:5001/healthz → OK
	•	curl -sSf http://localhost:5175 → HTML index page

⸻

23.6 Kill Dev Before Proceeding

pkill -f "vite|tsx server/index.ts" 2>/dev/null || true


⸻

✅ Outcome:
	•	Replit environment stable and ready.
	•	Scripts normalized for dev & prod.
	•	Proxy and output paths aligned.
	•	Env secrets confirmed.
	•	Vite + API proven to work together.

⸻

NEXT:
Once this check passes, proceed to Step 24 (Client TS fixes — batch 1).

⸻

Do you want me to also rewrite steps 24–34 in this exact “agent-ready” detailed format after this? Or continue with 25 immediately after 24 in this style?