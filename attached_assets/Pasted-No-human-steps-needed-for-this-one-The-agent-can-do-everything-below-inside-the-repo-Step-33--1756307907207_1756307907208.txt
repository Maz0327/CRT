No human steps needed for this one. The agent can do everything below inside the repo.

⸻

Step 33 — Frontend foundations for “Analyze Together” (hooks, services, UI primitives)

Goal: Add client-side services, hooks, and minimal UI primitives so the app can:
	•	Create/select a group
	•	Add captures to a group
	•	Enqueue group analysis
	•	Poll and render Truth Lab results (Jobs-style, narrative JSON)

Note: We won’t wire these into existing pages/routes yet. Step 34 will integrate them into the UI (e.g., Captures Inbox and a Group Analysis view). This step only adds well-typed, reusable building blocks.

⸻

Replit Agent — exact actions

# 1) Shared types for Truth Lab results (strict, narrative-friendly)
mkdir -p shared
cat > shared/truth-types.ts <<'TS'
export type TruthReceipt = { quote: string; source?: string; url?: string; timestamp?: string };

export type TruthChain = {
  fact: string;
  observation: string;
  insight: string;
  human_truth: string;
  cultural_moment: string;
};

export type TruthLabResult = {
  headline: string;
  summary: string;
  truth_chain: TruthChain;
  cohorts: string[];
  strategic_moves: string[];
  confidence: number; // 0..1
  receipts: TruthReceipt[];
  why_this_surfaced?: string;
  // Non-fatal fallback fields if AI returned raw/invalid
  error?: string;
  raw?: unknown;
};

export type TruthCheckRow = {
  id: string;
  group_id?: string | null;
  capture_id?: string | null;
  status: 'pending' | 'running' | 'complete' | 'error';
  result?: TruthLabResult | null;
  error?: string | null;
  created_at?: string;
  started_at?: string | null;
  completed_at?: string | null;
};
TS

# 2) Groups service (uses canonical api.request; no .get/.post assumptions)
mkdir -p client/src/ui-v2/services
cat > client/src/ui-v2/services/groups.ts <<'TS'
import { api } from "../lib/api";
import type { TruthCheckRow } from "@/../../shared/truth-types";

export type Group = { id: string; name: string; projectId?: string | null };

export const groupsService = {
  async create(input: { name: string; projectId?: string | null }) {
    return api.request<Group>("/api/groups", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(input),
    });
  },

  async addCapture(groupId: string, captureId: string) {
    return api.request(`/api/groups/${groupId}/items`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ captureId }),
    });
  },

  async analyze(groupId: string) {
    return api.request<{ status: string; checkId?: string }>(`/api/groups/${groupId}/analyze`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({}),
    });
  },

  async latestTruthCheck(groupId: string) {
    return api.request<TruthCheckRow>(`/api/truth/check?groupId=${encodeURIComponent(groupId)}`, {
      method: "GET",
    });
  },
};
TS

# 3) Hooks: create/add/analyze + status polling (TanStack Query)
mkdir -p client/src/ui-v2/hooks
cat > client/src/ui-v2/hooks/useGroupAnalysis.ts <<'TS'
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { groupsService } from "../services/groups";
import type { TruthCheckRow } from "@/../../shared/truth-types";

export function useCreateGroup() {
  return useMutation({
    mutationFn: (input: { name: string; projectId?: string | null }) =>
      groupsService.create(input),
  });
}

export function useAddToGroup() {
  const qc = useQueryClient();
  return useMutation({
    mutationFn: (args: { groupId: string; captureId: string }) =>
      groupsService.addCapture(args.groupId, args.captureId),
    onSuccess: (_data, vars) => {
      qc.invalidateQueries({ queryKey: ["group", vars.groupId, "items"] });
    },
  });
}

export function useAnalyzeGroup() {
  const qc = useQueryClient();
  return useMutation({
    mutationFn: (groupId: string) => groupsService.analyze(groupId),
    onSuccess: (_data, groupId) => {
      qc.invalidateQueries({ queryKey: ["truth", "group", groupId, "latest"] });
    },
  });
}

export function useTruthCheck(groupId?: string) {
  return useQuery<TruthCheckRow>({
    queryKey: ["truth", "group", groupId, "latest"],
    queryFn: () => groupsService.latestTruthCheck(groupId!),
    enabled: !!groupId,
    refetchInterval: (q) => {
      const status = (q.state.data as TruthCheckRow | undefined)?.status;
      return status && (status === "pending" || status === "running") ? 2000 : false;
    },
  });
}
TS

# 4) UI primitives: Result renderer (narrative, Jobs-style)
mkdir -p client/src/ui-v2/components/truth
cat > client/src/ui-v2/components/truth/TruthResult.tsx <<'TS'
import React from "react";
import type { TruthLabResult } from "@/../../shared/truth-types";

type Props = { result?: TruthLabResult | null; isLoading?: boolean; error?: string | null };

export default function TruthResult({ result, isLoading, error }: Props) {
  if (isLoading) {
    return (
      <div className="rounded-2xl p-6 border bg-background/60 backdrop-blur">
        <div className="animate-pulse space-y-3">
          <div className="h-6 w-2/3 rounded bg-foreground/10" />
          <div className="h-4 w-1/2 rounded bg-foreground/10" />
          <div className="h-4 w-5/6 rounded bg-foreground/10" />
          <div className="h-4 w-4/6 rounded bg-foreground/10" />
        </div>
      </div>
    );
  }
  if (error) {
    return <div className="text-red-600 text-sm">Error: {error}</div>;
  }
  if (!result) {
    return <div className="text-muted-foreground text-sm">No result yet.</div>;
  }

  const c = result.truth_chain;
  const pct = Math.round((result.confidence ?? 0) * 100);

  return (
    <div className="space-y-6">
      <div className="rounded-2xl p-6 border bg-background/70 backdrop-blur">
        <h2 className="text-xl font-semibold">{result.headline}</h2>
        <p className="text-sm text-muted-foreground mt-2">{result.summary}</p>
        <div className="mt-4 h-2 w-full bg-foreground/10 rounded">
          <div
            className="h-2 bg-foreground/60 rounded"
            style={{ width: `${pct}%` }}
            aria-label={`Confidence ${pct}%`}
            title={`Confidence ${pct}%`}
          />
        </div>
      </div>

      <div className="grid md:grid-cols-2 gap-4">
        <ChainCard title="Fact" body={c.fact} />
        <ChainCard title="Observation" body={c.observation} />
        <ChainCard title="Insight" body={c.insight} />
        <ChainCard title="Human Truth" body={c.human_truth} />
        <ChainCard title="Cultural Moment" body={c.cultural_moment} />
      </div>

      {!!result.cohorts?.length && (
        <div className="rounded-xl p-4 border">
          <h3 className="font-medium">Cohorts</h3>
          <div className="mt-2 flex flex-wrap gap-2">
            {result.cohorts.map((t, i) => (
              <span key={i} className="text-xs px-2 py-1 rounded bg-foreground/10">{t}</span>
            ))}
          </div>
        </div>
      )}

      {!!result.strategic_moves?.length && (
        <div className="rounded-xl p-4 border">
          <h3 className="font-medium">Strategic Moves</h3>
          <ul className="mt-2 list-disc ml-5 space-y-1 text-sm">
            {result.strategic_moves.map((m, i) => <li key={i}>{m}</li>)}
          </ul>
        </div>
      )}

      {!!result.receipts?.length && (
        <div className="rounded-xl p-4 border">
          <h3 className="font-medium">Receipts</h3>
          <ul className="mt-2 space-y-2 text-sm">
            {result.receipts.slice(0, 5).map((r, i) => (
              <li key={i}>
                <q>{r.quote}</q>
                {r.source ? <span className="text-muted-foreground"> — {r.source}</span> : null}
              </li>
            ))}
          </ul>
        </div>
      )}

      {result.why_this_surfaced && (
        <div className="rounded-xl p-4 border">
          <h3 className="font-medium">Why this surfaced</h3>
          <p className="text-sm mt-1">{result.why_this_surfaced}</p>
        </div>
      )}
    </div>
  );
}

function ChainCard({ title, body }: { title: string; body: string }) {
  return (
    <div className="rounded-xl p-4 border bg-background/60">
      <h4 className="font-semibold">{title}</h4>
      <p className="text-sm mt-1 leading-relaxed">{body}</p>
    </div>
  );
}
TS

# 5) Minimal “Analyze Together” bar (accepts selected capture IDs; we’ll wire it later)
mkdir -p client/src/ui-v2/components/groups
cat > client/src/ui-v2/components/groups/AnalyzeTogetherBar.tsx <<'TS'
import React from "react";
import { useCreateGroup, useAddToGroup, useAnalyzeGroup, useTruthCheck } from "../../hooks/useGroupAnalysis";
import TruthResult from "../truth/TruthResult";

type Props = {
  selectedCaptureIds: string[];
  projectId?: string | null;
};

export default function AnalyzeTogetherBar({ selectedCaptureIds, projectId }: Props) {
  const [groupId, setGroupId] = React.useState<string | null>(null);

  const createGroup = useCreateGroup();
  const addToGroup = useAddToGroup();
  const analyzeGroup = useAnalyzeGroup();
  const truth = useTruthCheck(groupId || undefined);

  async function onAnalyze() {
    if (!selectedCaptureIds?.length) return;

    const groupName = `Group ${new Date().toLocaleString()}`;
    const g = await createGroup.mutateAsync({ name: groupName, projectId: projectId ?? null });
    setGroupId(g.id);

    for (const id of selectedCaptureIds) {
      await addToGroup.mutateAsync({ groupId: g.id, captureId: id });
    }
    await analyzeGroup.mutateAsync(g.id);
  }

  return (
    <div className="border rounded-2xl p-4 bg-background/70 space-y-4">
      <div className="flex items-center justify-between gap-3">
        <div className="text-sm">
          {selectedCaptureIds.length
            ? `${selectedCaptureIds.length} selected`
            : "Select captures to analyze together"}
        </div>
        <button
          className="px-3 py-2 rounded-lg border hover:bg-foreground/5"
          disabled={!selectedCaptureIds.length || createGroup.isPending || addToGroup.isPending || analyzeGroup.isPending}
          onClick={onAnalyze}
        >
          {createGroup.isPending || addToGroup.isPending || analyzeGroup.isPending ? "Queuing…" : "Analyze Together"}
        </button>
      </div>

      {groupId && (
        <div className="pt-2 border-t">
          <div className="text-xs text-muted-foreground mb-2">
            Group: {groupId} — Status: {truth.data?.status || (truth.isLoading ? "loading…" : "unknown")}
          </div>
          <TruthResult
            result={truth.data?.result as any}
            isLoading={truth.isLoading || (truth.data?.status !== "complete" && truth.data?.status !== "error")}
            error={truth.data?.status === "error" ? (truth.data?.error || "error") : undefined}
          />
        </div>
      )}
    </div>
  );
}
TS

# 6) Typecheck sanity (non-blocking if there are other repo errors)
npm run typecheck || echo "⚠️ Typecheck has warnings/errors (not fatal for this step)"

# 7) Build sanity (non-blocking; UI not wired yet)
npm run build || echo "⚠️ Build had warnings/errors (expected until routes wire in Step 34)"


⸻

What you’ll have after Step 33
	•	Typed shared models for Truth Lab results (shared/truth-types.ts).
	•	Client services (groupsService) that hit the new Step-32 backend endpoints.
	•	Hooks to create a group, add captures, enqueue analysis, and poll latest results.
	•	UI primitives to render narrative Truth Lab output (Jobs-style headline, chain, personas, moves, receipts) and a compact “Analyze Together” bar that we can drop into any page.

In Step 34 we’ll wire these primitives into real screens:
	•	Add the Analyze Together bar to the Captures Inbox selection toolbar.
	•	Add a basic Group Analysis route (e.g., /groups/:id) and a link in the Inbox after enqueue.
	•	Ensure the route streams/polls the result and renders the TruthResult component with empty/error states.