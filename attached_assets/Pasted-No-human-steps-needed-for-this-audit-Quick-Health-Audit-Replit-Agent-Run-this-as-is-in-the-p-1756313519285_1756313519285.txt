No human steps needed for this audit.

⸻

Quick Health Audit — Replit Agent

Run this as-is in the project root. It won’t stop your dev servers or mutate files; it just checks and reports.

#!/usr/bin/env bash
set +e

echo "🩺 Content Radar – Quick Health Audit ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
echo "────────────────────────────────────────────────────────────────────────────"

pass=0; fail=0; warn=0

check () {
  local name="$1"; shift
  if eval "$@"; then
    printf "✅ %s\n" "$name"; pass=$((pass+1))
  else
    printf "❌ %s\n" "$name"; fail=$((fail+1))
  fi
}

warnf () {
  printf "⚠️  %s\n" "$1"; warn=$((warn+1))
}

# 0) Runtime & scripts
echo "• Runtime & scripts"
node -v 2>/dev/null || true
npm -v 2>/dev/null || true
echo "Scripts:" && node -e 'try{console.log(require("./package.json").scripts)}catch(e){process.exit(0)}' || true
echo

# 1) Process / ports (non-fatal if missing)
echo "• Process/port presence"
pgrep -fa "vite --host" >/dev/null 2>&1 && echo "   vite dev: running" || echo "   vite dev: not running"
pgrep -fa "tsx server/index.ts" >/dev/null 2>&1 && echo "   server:   running" || echo "   server:   not running"
# Some environments lack lsof; try both
(lsof -i :5175 -sTCP:LISTEN 2>/dev/null || ss -ltn 2>/dev/null | awk '$4 ~ /:5175$/'){ true; } && echo "   :5175 (vite): listening" || echo "   :5175 (vite): no listener"
(lsof -i :5001 -sTCP:LISTEN 2>/dev/null || ss -ltn 2>/dev/null | awk '$4 ~ /:5001$/'){ true; } && echo "   :5001 (api):  listening" || echo "   :5001 (api):  no listener"
echo

# 2) API health (direct)
echo "• API health (direct → http://localhost:5001/healthz)"
api_json="$(curl -s --max-time 3 http://localhost:5001/healthz)"
if echo "$api_json" | grep -q '"status":"ok"'; then
  echo "   $api_json"
  ((pass++)); echo "✅ API /healthz"
else
  echo "   (no/invalid response) $api_json"
  ((fail++)); echo "❌ API /healthz"
fi
echo

# 3) Vite dev → proxy health (http://localhost:5175/api/healthz)
echo "• Vite proxy health (→ http://localhost:5175/api/healthz)"
proxy_json="$(curl -s --max-time 3 http://localhost:5175/api/healthz)"
if echo "$proxy_json" | grep -q '"status":"ok"'; then
  echo "   $proxy_json"
  ((pass++)); echo "✅ Vite proxy /api/healthz"
else
  echo "   (no/invalid response) $proxy_json"
  ((fail++)); echo "❌ Vite proxy /api/healthz"
fi
echo

# 4) Dev index served (http://localhost:5175/)
echo "• Vite index (→ http://localhost:5175/)"
code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 3 http://localhost:5175/)
[ "$code" = "200" ] && echo "   HTTP $code" || echo "   HTTP $code"
[ "$code" = "200" ] && ((pass++)) && echo "✅ Vite index /" || ((fail++)) && echo "❌ Vite index /"
echo

# 5) CORS header sanity (Origin: http://localhost:3000 → API /healthz)
echo "• CORS sanity (Origin=http://localhost:3000 → API /healthz)"
cors_headers="$(curl -s -D - -o /dev/null -H 'Origin: http://localhost:3000' http://localhost:5001/healthz)"
if echo "$cors_headers" | grep -i -q 'access-control-allow-origin'; then
  echo "$cors_headers" | grep -i 'access-control-allow-origin' | sed 's/^/   /'
  ((pass++)); echo "✅ CORS header present"
else
  ((warn++)); echo "⚠️  No ACAO header detected (may be expected if CORS only applied on /api/*)"
fi
echo

# 6) Vite allowedHosts presence
echo "• Vite allowedHosts presence in vite.config.ts"
if grep -n "allowedHosts" vite.config.ts >/dev/null 2>&1; then
  grep -n "allowedHosts" vite.config.ts | sed 's/^/   /'
  ((pass++)); echo "✅ allowedHosts configured"
else
  ((warn++)); echo "⚠️  allowedHosts not found in vite.config.ts (ok if already working in Preview)"
fi
echo

# 7) TypeScript check (non-blocking)
echo "• TypeScript typecheck"
npm run -s typecheck >/tmp/tsc.out 2>&1
tscode=$?
if [ $tscode -eq 0 ]; then
  ((pass++)); echo "✅ tsc clean"
else
  ((warn++)); echo "⚠️  tsc reported issues (see /tmp/tsc.out)"
  tail -n 20 /tmp/tsc.out || true
fi
echo

# 8) Build dry-run (non-blocking, does not start prod)
echo "• Build dry-run (vite build)"
npm run -s build >/tmp/build.out 2>&1
bcode=$?
if [ $bcode -eq 0 ]; then
  ((pass++)); echo "✅ build ok"
  # list artifacts briefly
  ls -l dist 2>/dev/null | sed 's/^/   /' || true
else
  ((warn++)); echo "⚠️  build had issues (see /tmp/build.out)"
  tail -n 30 /tmp/build.out || true
fi
echo

# 9) Optional API surface pings (won’t fail audit if they 404)
echo "• Optional API surface probes"
for u in /api/projects /api/briefs /api/moments /api/truth/health; do
  code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 3 "http://localhost:5001$u")
  echo "   $u → HTTP $code"
done
echo

# Summary
echo "────────────────────────────────────────────────────────────────────────────"
echo "Summary: $pass passed, $warn warnings, $fail failed"
[ $fail -eq 0 ] && exit 0 || exit 1

How to read the results
	•	Green checks = confirmed working right now.
	•	Warnings = non-blocking (e.g., CORS header not present on non-/api routes, or typecheck/build needs attention but dev can still run).
	•	Fails = something is unreachable or misconfigured (usually a stopped dev server, port mismatch, or Vite proxy mis-wire).

Paste the final “Summary” line and any failing section outputs here, and I’ll tell you exactly what to fix next.