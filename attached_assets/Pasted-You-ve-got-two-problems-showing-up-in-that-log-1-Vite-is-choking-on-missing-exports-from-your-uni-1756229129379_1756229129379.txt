You’ve got two problems showing up in that log:
	1.	Vite is choking on missing exports from your unified client API helper.
	2.	Vite is also “seeing” a stale client/dist/index.html (leftover build) as an entry. That’s harmless noise, but we’ll clean it so it doesn’t confuse anything.

Below is a clean, exact fix the agent can run. It replaces the UI API helper with the correct exports, removes the stale client/dist, and restarts dev.

⸻

Fix plan (agent-ready)

A. Stop anything running

pkill -f "vite|tsx server/index.ts" 2>/dev/null || true

B. Remove the stale client build

rm -rf client/dist

C. Overwrite the UI API helper with the correct, canonical version

This file must exist exactly here: client/src/ui-v2/lib/api.ts

cat > client/src/ui-v2/lib/api.ts <<'TS'
/**
 * Canonical UI API helper for UI-V2
 * Exposes: api, IS_MOCK_MODE, setScopedProjectId
 * - api: { request, get, post, patch, delete } using fetch
 * - IS_MOCK_MODE: boolean derived from env for mock auth flows
 * - setScopedProjectId: setter for X-Project-ID header on all API calls
 */
let PROJECT_ID: string | null = null;

export function setScopedProjectId(id: string | null) {
  PROJECT_ID = id;
}

const RAW_BASE = (import.meta as any).env?.VITE_API_BASE || "/api";
const API_BASE = String(RAW_BASE).replace(/\/$/, "");

export const IS_MOCK_MODE: boolean = String(
  (import.meta as any).env?.VITE_MOCK_AUTH ?? ""
).toLowerCase() === "true";

type Json =
  | string
  | number
  | boolean
  | null
  | { [prop: string]: Json }
  | Json[];

type HeadersRecord = Record<string, string | undefined>;

async function request<T = any>(path: string, init: RequestInit = {}): Promise<T> {
  const url = `${API_BASE}${path.startsWith("/") ? path : `/${path}`}`;
  const headers: HeadersRecord = {
    "Content-Type": "application/json",
    ...(init.headers as HeadersRecord)
  };
  if (PROJECT_ID) headers["X-Project-ID"] = PROJECT_ID;

  const res = await fetch(url, {
    ...init,
    headers,
    credentials: "include",
  });

  // Try to parse JSON errors helpfully
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    try {
      const data = text ? JSON.parse(text) : {};
      const msg = data?.error || data?.message || `${res.status} ${res.statusText}`;
      throw new Error(msg);
    } catch {
      throw new Error(text || `${res.status} ${res.statusText}`);
    }
  }

  const ct = res.headers.get("content-type") || "";
  if (ct.includes("application/json")) {
    return (await res.json()) as T;
  }
  // Allow text for some endpoints (e.g., export)
  return (await res.text()) as unknown as T;
}

export const api = {
  request,
  get<T = any>(path: string) {
    return request<T>(path, { method: "GET" });
  },
  post<T = any>(path: string, body?: Json) {
    return request<T>(path, {
      method: "POST",
      body: body === undefined ? undefined : JSON.stringify(body),
    });
  },
  patch<T = any>(path: string, body?: Json) {
    return request<T>(path, {
      method: "PATCH",
      body: body === undefined ? undefined : JSON.stringify(body),
    });
  },
  delete<T = any>(path: string) {
    return request<T>(path, { method: "DELETE" });
  },
};
TS

D. Make sure Vite knows this env var exists (types only; safe)

grep -q "VITE_MOCK_AUTH" client/src/vite-env.d.ts || cat >> client/src/vite-env.d.ts <<'TS'

  readonly VITE_MOCK_AUTH?: string
TS

E. Start dev again

npm run dev

You should now see Vite come up cleanly (no more “No matching export in …/lib/api.ts for IS_MOCK_MODE / setScopedProjectId”), and the app should load.

⸻

Why this works
	•	Your UI imports like these were failing:
	•	client/src/ui-v2/app/providers.tsx → setScopedProjectId
	•	client/src/ui-v2/hooks/useAuth.ts and various services → IS_MOCK_MODE, api
	•	The agent previously turned client/src/ui-v2/lib/api.ts into a re-export that didn’t include those symbols, so esbuild stopped the dev server.
	•	The replacement above restores a single source of truth for the client-side API wrapper, with the exact exports your UI code expects.
	•	Removing client/dist/ avoids Vite listing that stale HTML as an “entry” during dependency scanning.

If you still see a blank page after this and the terminal shows Vite ready (no red errors), open the browser Console and Network tabs and tell me any red errors you see. The next likely culprits would be:
	•	a runtime error inside some UI route/component, or
	•	a missing env (e.g., login hitting a protected API without auth).

But first, run the steps above; they directly address the errors you pasted.