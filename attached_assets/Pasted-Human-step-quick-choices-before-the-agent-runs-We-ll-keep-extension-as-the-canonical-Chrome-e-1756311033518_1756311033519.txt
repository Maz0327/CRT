Human step (quick choices before the agent runs):
	•	We’ll keep extension/ as the canonical Chrome extension folder and archive chrome-extension/ if it exists. If you prefer the opposite, tell me first.
	•	We’ll archive demo/test/legacy files instead of deleting, so we don’t lose anything.

⸻

Step 34-prep — Safe cleanup (archive old code, stop random errors)

Goal: remove/ignore legacy and duplicate code paths that keep tripping builds, without risking data loss. We’ll (1) inventory, (2) archive, (3) tighten tsconfig excludes, (4) clear stray build outputs, and (5) verify.

Replit Agent — run exactly this in the repo

set -e

echo "🧹 Step 34-prep: Safe cleanup & archive"

# 0) Prep an archive folder with timestamp
STAMP="$(date +%Y%m%d-%H%M%S)"
ARCH="legacy/_archive-$STAMP"
mkdir -p "$ARCH"
echo "📦 Archive folder: $ARCH"

# 1) INVENTORY — show likely legacy/demo/duplicate paths (no changes yet)
echo "🔎 Inventory: likely legacy/demo/duplicates"
ls -d client/src/_legacy 2>/dev/null || true
ls -d client/src/tests client/src/__tests__ 2>/dev/null || true
ls -d scripts 2>/dev/null || true
ls -d server/scripts 2>/dev/null || true
ls -d extension chrome-extension 2>/dev/null || true
ls -d client/dist dist 2>/dev/null || true
ls -1 client | grep -E 'demo|example|dark|play|test' || true
rg -n --hidden -S "mock|placeholder|demo" client server | sed -n '1,80p' || true

# 2) ARCHIVE — carefully move known troublemakers out of the way
#    (We archive instead of delete. Adjust as needed later.)

# 2.a) Stray build outputs that confuse Vite (we'll delete these)
if [ -d client/dist ]; then
  echo "🗑️ Removing stray client/dist (Vite scans it as an entry)"
  rm -rf client/dist
fi

# 2.b) Demo/extra HTML entry that causes multi-entry scanning
if [ -f client/dark-mode-demo.html ]; then
  mkdir -p "$ARCH/client"
  echo "📦 Archiving client/dark-mode-demo.html"
  git mv client/dark-mode-demo.html "$ARCH/client/dark-mode-demo.html" 2>/dev/null || mv client/dark-mode-demo.html "$ARCH/client/"
fi

# 2.c) Legacy UI folders/tests we won’t ship with MVP
if [ -d client/src/_legacy ]; then
  mkdir -p "$ARCH/client/src"
  echo "📦 Archiving client/src/_legacy"
  git mv client/src/_legacy "$ARCH/client/src/_legacy" 2>/dev/null || mv client/src/_legacy "$ARCH/client/src/"
fi

if [ -d client/src/__tests__ ]; then
  mkdir -p "$ARCH/client/src"
  echo "📦 Archiving client/src/__tests__"
  git mv client/src/__tests__ "$ARCH/client/src/__tests__" 2>/dev/null || mv client/src/__tests__ "$ARCH/client/src/"
fi

if [ -d client/src/tests ]; then
  mkdir -p "$ARCH/client/src"
  echo "📦 Archiving client/src/tests"
  git mv client/src/tests "$ARCH/client/src/tests" 2>/dev/null || mv client/src/tests "$ARCH/client/src/"
fi

# 2.d) Server-side experimental scripts that triggered TS/dep errors during audits
for f in server/scripts/test-vision.ts server/test-integrations.ts scripts/smoke.ts scripts/smoke-e2e.ts; do
  if [ -f "$f" ]; then
    mkdir -p "$ARCH/$(dirname "$f")"
    echo "📦 Archiving $f"
    git mv "$f" "$ARCH/$f" 2>/dev/null || mv "$f" "$ARCH/$f"
  fi
done

# 2.e) Prod server duplicates (we use server/index.ts + prod-frontend.ts)
if [ -f server/prod-server.ts ]; then
  mkdir -p "$ARCH/server"
  echo "📦 Archiving server/prod-server.ts"
  git mv server/prod-server.ts "$ARCH/server/prod-server.ts" 2>/dev/null || mv server/prod-server.ts "$ARCH/server/"
fi

# 2.f) Duplicate extension folder — keep 'extension/' as canonical
if [ -d chrome-extension ]; then
  mkdir -p "$ARCH"
  echo "📦 Archiving chrome-extension/ (keeping extension/ as canonical)"
  git mv chrome-extension "$ARCH/chrome-extension" 2>/dev/null || mv chrome-extension "$ARCH/chrome-extension"
fi

# 3) PACKAGE JSON — remove deprecated Vite React plugin (we use SWC)
if grep -q '"@vitejs/plugin-react"' package.json 2>/dev/null; then
  echo "🧽 Removing @vitejs/plugin-react (deprecated in this repo)"
  npm pkg delete devDependencies.'@vitejs/plugin-react' 2>/dev/null || true
  npm pkg delete dependencies.'@vitejs/plugin-react' 2>/dev/null || true
fi

# 4) TSCONFIG — tighten excludes so archived/demo code can’t pollute builds
# Add or merge excludes idempotently
applypatch <<'PATCH' || true
*** Begin Patch
*** Update File: tsconfig.json
@@
-  "exclude": [
-    "node_modules",
-    "build",
-    "dist",
-    "/**/*.test.ts",
-    "client/src/_legacy/**/",
-    "client/src/tests",
-    "**/*.test.tsx"
-  ],
+  "exclude": [
+    "node_modules",
+    "build",
+    "dist",
+    "client/dist",
+    "**/*.test.ts",
+    "**/*.test.tsx",
+    "client/src/_legacy/**",
+    "client/src/tests/**",
+    "client/src/__tests__/**",
+    "scripts/**",
+    "server/scripts/**",
+    "legacy/**"
+  ],
*** End Patch
PATCH

# 5) CLEAR root dist if present (we’ll rebuild cleanly)
if [ -d dist ]; then
  echo "🗑️ Removing root dist/"
  rm -rf dist
fi

# 6) INSTALL pass (in case plugin removal changed lockfile)
npm i --no-audit --no-fund

# 7) VERIFY — typecheck and a prod build (non-blocking warnings ok)
npm run typecheck || echo "⚠️ Typecheck warnings/errors (we’ll address functional ones next)."
npm run build || echo "⚠️ Build warnings/errors (dev still OK)."

echo "✅ Cleanup complete. Archived items are under: $ARCH"


⸻

Why this helps
	•	Removes the noise: demo pages (dark-mode-demo.html), stray client/dist/, test/experimental scripts that were causing TypeScript and Vite to scan extra entries.
	•	Avoids surprises: we archive instead of delete, so nothing is lost.
	•	Prevents future bleed-through: strengthened tsconfig.json excludes keep legacy/experimental code out of your build forever.
	•	Keeps extension canonical: one folder (extension/) equals one source of truth.

When this finishes, run the app normally (npm run dev). If anything you actually need got archived by mistake, tell me and I’ll restore it quickly from legacy/_archive-<timestamp>/.